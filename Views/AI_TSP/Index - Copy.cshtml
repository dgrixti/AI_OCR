@{
    ViewData["Title"] = "AI Projects";
}

    <div class="text-center">
        <h1 class="display-4">AI Travelling Salesman Problem (Part 1)</h1>

        <p><b>Example #1 </b> with 3 cities (6 possible paths).</p>


        <div class="main_container">
            <center>
                <canvas id="drawCanvasSimple" width="750" height="200"></canvas>

                <p />

                <canvas id="canvasSimpleSolved" width="750" height="200"></canvas>
            </center>
        </div>

        <script>

            var canvasSimple = document.getElementById("drawCanvasSimple");
            var canvasSimpleSolved = document.getElementById("canvasSimpleSolved");

            function drawCircle(canvasVar, id, x, y) {
                var ctx = canvasVar.getContext("2d");

                ctx.strokeStyle = 'black';
                ctx.font = "13px Arial";
                ctx.fillText(id, x + 10, y + 10);

                ctx.beginPath();
                ctx.arc(x, y, 5, 0, 2 * Math.PI);
                ctx.stroke();
            }

            function drawLine(canvasVar, x1, y1, x2, y2) {
                var ctx = canvasVar.getContext("2d");

                ctx.strokeStyle = 'red';
                ctx.lineWidth = 1

                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.stroke();
            }

            function plotCitiesSimple() {
                var json = getCities("v1");

                for (var i = 0; i < 4; i++) {
                    var obj = json[i];

                    // increase the space for each circle plotting (visual purpose only)
                    var objview = Object.create(obj);
                    objview.x = objview.x * 10;
                    objview.y = objview.y * 2;
        
                    ///console.log("orig: " + obj.id + ": " + obj.x + ", " + obj.y);
                    ///console.log("copy: " + objview.id + ": " + objview.x + ", " + objview.y);

                    // draw the points
                    drawCircle(canvasSimple, objview.id, objview.x, objview.y);
                }
            }

            function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            async function plotCitiesSimpleSolved() {
                var prePoint = null;
                var json = getCities("v1");

                for (var i = 0; i < 4; i++) {
                    var obj = json[i];

                    // increase the space for each circle plotting (visual purpose only)
                    var objview = Object.create(obj);
                    objview.x = objview.x * 10;
                    objview.y = objview.y * 2;
                    
                    ///console.log("orig: " + obj.id + ": " + obj.x + ", " + obj.y);
                    ///console.log("copy: " + objview.id + ": " + objview.x + ", " + objview.y);

                    // draw the points
                    drawCircle(canvasSimpleSolved, objview.id, objview.x, objview.y);
                }

                 await sleep("1000");
                
                // draw the lines
                for (var i = 0; i < 4; i++) {
                    var obj = json[i];
                    if (prePoint !== null) {
                        drawLine(canvasSimpleSolved, prePoint.x, prePoint.y, obj.x, obj.y);
                    }
                    prePoint = obj;
                    await sleep("1000");
                }

                // draw the final closing point
                drawLine(canvasSimpleSolved, json[0].x, json[0].y, json[3].x, json[3].y);

            }

            function getCities(vers) {
                var dataret = "";
                $.ajax({
                    type: "POST",
                    traditional: true,
                    dataType: "json",
                    url: "/AI_TSP/GetCities",
                    data: { vers },
                    cache: false,
                    async: false, // wait for result
                    complete: function (data) {
                        if (data.responseJSON.length > 0) {
                            dataret = data.responseJSON;
                            console.log("got response  xxx");

                            console.log(data.responseJSON);
                        }
                        else {
                            console.log("no data!");
                        }
                    }
                });

                return dataret;
            }

            function getPermutations(vers) {
                var dataret = "";
                $.ajax({
                    type: "POST",
                    traditional: true,
                    dataType: "json",
                    url: "/AI_TSP/GetPermutationsSimple",
                    data: { vers },
                    cache: false,
                    async: false, // wait for result
                    complete: function (data) {
                        if (data.responseJSON.length > 0) {
                            dataret = data.responseJSON;
                            console.log("got response permutations");
                            console.log(data.responseJSON);
                        }
                        else {
                            console.log("no data!");
                        }
                    }
                });

                return dataret;
            }

            setTimeout("plotCitiesSimple()", 200);
            setTimeout("plotCitiesSimpleSolved()", 10000);
            setTimeout("tableCreate()", 200);

            function tableCreate() {
                // Get permuations (4 cities)
                var json = getPermutations("");

                var body = document.getElementsByTagName('body')[0];
                var tbl = document.createElement('table');
                tbl.style.width = '100%';
                tbl.setAttribute('border', '1');
                var tbdy = document.createElement('tbody');

                for (var i = 0; i < json.length; i++) {

                    var tr = document.createElement('tr');

                    for (var j = 0; j < 2; j++) {

                        if (j == 0) {

                            var td = document.createElement('td');
                            td.appendChild(document.createTextNode((i + 1).toString() + "."))
                            tr.appendChild(td);
                            // break;

                        } else if (j == 1) {
                            // create td
                            var td = document.createElement('td');
                            td.appendChild(document.createTextNode(json[i]));
                            tr.appendChild(td);
                        }
                        else {
                            break;
                        }
                    }
                    tbdy.appendChild(tr);
                }
                tbl.appendChild(tbdy);
                body.appendChild(tbl);
            }


        </script>
    </div>
